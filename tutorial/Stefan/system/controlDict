/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     8.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interThermalPhaseChangeFoam;

startFrom       latestTime;

startTime       0.0;

stopAt          endTime;

endTime         0.3;

deltaT          1E-6;

writeControl    adjustableRunTime;
writeInterval   0.01;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  on;

maxCo           0.4;
maxAlphaCo      0.4;
maxFourier	0.25;

maxDeltaT       1E-2;

//Combined Hydrostatic Pressure
CombinedHSPressure no;

//Global vars for funky/groovy

functions
{
	VolumeLiquid //Gives the volume of the liquid phase
	{
		libs ("libutilityFunctionObjects.so");
		//libs            ("libfieldFunctionObjects.so");
		type coded;
		name VolumeLiquid;
	        //redirectType VolumeLiquid;
        	executeControl      timeStep;
        	executeInterval     10;
        	writeControl        writeTime;
		code
		#{
		#};
		codeExecute           
		#{     
			//Get bottom wall area
			const fvBoundaryMesh& bMesh = mesh().boundary();
			//Next get wall patch:
			label WallPatchID  = bMesh.findPatchID("BotWall");
			const fvPatch& WallPatch = bMesh[WallPatchID];
			const scalar AWall = gSum( WallPatch.magSf() );

			//Sum up liquid volume:
			const volScalarField& alpha1 = mesh().lookupObject<volScalarField>("alpha1");
			const scalar VolLiquid = gSum( (mesh().V() * alpha1.internalField())() );
			const scalar delta = VolLiquid / AWall;
			//***********************************************************************
                        
			//Finally print out results:

			//Get t
			scalar t = mesh().time().value();
			scalar dt = mesh().time().deltaTValue();

			//Now write out data:
			if( Pstream::master() == true )
			{
				std::ofstream fs;
				fs.open ("LiquidAccumulation.dat", std::fstream::app);
				fs.precision(12);
				fs << t << "\t" << dt << "\t" << delta <<"\n";
				fs.close();
			}

		#};

		codeInclude
		#{
			#include <fstream>
		#};
	}
};



libs (
    "libOpenFOAM.so"
    "libtwoPhaseProperties.so"
    "libinterfaceProperties.so"
    );
// ************************************************************************* //
